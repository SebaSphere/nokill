plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url 'https://maven.wispforest.io' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://maven.nucleoid.xyz' }

    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
        content {
            includeGroup 'io.github.ladysnake'
            includeGroupByRegex 'io\\.github\\.onyxstudios.*'
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    include(modImplementation('me.lucko:fabric-permissions-api:0.2-SNAPSHOT'))

    modImplementation "io.wispforest:owo-lib:${project.owo_version}"
    include "io.wispforest:owo-sentinel:${project.owo_version}"
    annotationProcessor compileOnly("io.wispforest:owo-lib:${project.owo_version}")

    modImplementation "io.github.ladysnake:PlayerAbilityLib:${pal_version}"
    include "io.github.ladysnake:PlayerAbilityLib:${pal_version}"

    // https://mvnrepository.com/artifact/net.dv8tion/JDA/5.0.0-beta.1
    include(implementation("net.dv8tion:JDA:5.0.0-beta.1")) {
        exclude module: 'opus-java'
    }

    // Dependencies for JDA v4.4.0
    include "net.sf.trove4j:trove4j:3.0.3"
    include 'org.slf4j:slf4j-nop:1.7.25'
    include 'org.slf4j:slf4j-api:1.7.25'
    include 'org.apache.commons:commons-collections4:4.1'
    include 'com.neovisionaries:nv-websocket-client:2.14'
    include 'com.squareup.okhttp3:okhttp:3.14.9'
    include 'com.squareup.okio:okio:1.17.2'
    include 'com.fasterxml.jackson.core:jackson-databind:2.10.1'
    include 'com.fasterxml.jackson.core:jackson-annotations:2.10.1'
    include 'com.fasterxml.jackson.core:jackson-core:2.10.1'
    include "org.json:json:20210307"
    include "club.minnced:discord-webhooks:0.5.8"

    // emoji-java
    include(implementation("com.vdurmont:emoji-java:5.1.1"))



    modImplementation include("xyz.nucleoid:server-translations-api:${serverapi_version}")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
